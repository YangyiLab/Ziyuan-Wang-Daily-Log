Automatically generated by Mendeley Desktop 1.19.8
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@article{Meyer2020,
abstract = {Background: Recent advances in sequencing technologies have led to an explosion in the number of genomes available, but accurate genome annotation remains a major challenge. The prediction of protein-coding genes in eukaryotic genomes is especially problematic, due to their complex exon–intron structures. Even the best eukaryotic gene prediction algorithms can make serious errors that will significantly affect subsequent analyses. Results: We first investigated the prevalence of gene prediction errors in a large set of 176,478 proteins from ten primate proteomes available in public databases. Using the well-studied human proteins as a reference, a total of 82,305 potential errors were detected, including 44,001 deletions, 27,289 insertions and 11,015 mismatched segments where part of the correct protein sequence is replaced with an alternative erroneous sequence. We then focused on the mismatched sequence errors that cause particular problems for downstream applications. A detailed characterization allowed us to identify the potential causes for the gene misprediction in approximately half (5446) of these cases. As a proof-of-concept, we also developed a simple method which allowed us to propose improved sequences for 603 primate proteins. Conclusions: Gene prediction errors in primate proteomes affect up to 50% of the sequences. Major causes of errors include undetermined genome regions, genome sequencing or assembly issues, and limitations in the models used to represent gene exon–intron structures. Nevertheless, existing genome sequences can still be exploited to improve protein sequence quality. Perspectives of the work include the characterization of other types of gene prediction errors, as well as the development of a more comprehensive algorithm for protein sequence error correction.},
author = {Meyer, Corentin and Scalzitti, Nicolas and Jeannin-Girardon, Anne and Collet, Pierre and Poch, Olivier and Thompson, Julie D.},
doi = {10.1186/s12859-020-03855-1},
file = {:E\:/wisc-intern/references/s12859-020-03855-1.pdf:pdf},
issn = {14712105},
journal = {BMC Bioinformatics},
keywords = {Error correction,Gene prediction,Genome annotation,Primates,Protein sequence errors},
number = {1},
pages = {1--16},
pmid = {33172385},
publisher = {BioMed Central},
title = {{Understanding the causes of errors in eukaryotic protein-coding gene prediction: a case study of primate proteomes}},
url = {https://doi.org/10.1186/s12859-020-03855-1},
volume = {21},
year = {2020}
}
@article{Khenoussi2014,
abstract = {Motivation: The prediction of protein coding genes is a major challenge that depends on the quality of genome sequencing, the accuracy of the model used to elucidate the exonic structure of the genes and the complexity of the gene splicing process leading to different protein variants. As a consequence, today's protein databases contain a huge amount of inconsistency, due to both natural variants and sequence prediction errors. Results: We have developed a new method, called SIBIS, to detect such inconsistencies based on the evolutionary information in multiple sequence alignments. A Bayesian framework, combined with Dirichlet mixture models, is used to estimate the probability of observing specific amino acids and to detect inconsistent or erroneous sequence segments. We evaluated the performance of SIBIS on a reference set of protein sequences with experimentally validated errors and showed that the sensitivity is significantly higher than previous methods, with only a small loss of specificity. We also assessed a large set of human sequences from the UniProt database and found evidence of inconsistency in 48% of the previously uncharacterized sequences. We conclude that the integration of quality control methods like SIBIS in automatic analysis pipelines will be critical for the robust inference of structural, functional and phylogenetic information from these sequences.. {\textcopyright} The Author(s) 2014.},
author = {Khenoussi, Walyd and Vanhoutr{\'{e}}ve, Renaud and Poch, Olivier and Thompson, Julie D.},
doi = {10.1093/bioinformatics/btu329},
file = {:E\:/wisc-intern/references/btu329.pdf:pdf},
issn = {14602059},
journal = {Bioinformatics},
number = {17},
pages = {2432--2439},
pmid = {24825613},
title = {{SIBIS: A Bayesian model for inconsistent protein sequence estimation}},
volume = {30},
year = {2014}
}
@article{Gan2020,
abstract = {Summary: As an intracellular form of a bacteriophage in the bacterial host genome, a prophage is usually integrated into bacterial DNA with high specificity and contributes to horizontal gene transfer (HGT). Phage therapy has been widely applied, for example, using phages to kill bacteria to treat pathogenic and resistant bacterial infections. Therefore, it is necessary to develop effective tools for the fast and accurate identification of prophages. Here, we introduce DBSCAN-SWA, a command line software tool developed to predict prophage regions of bacterial genomes. DBSCAN-SWA runs faster than any previous tool. Importantly, it has great detection power based on analysis using 184 manually curated prophages, with a recall of 85% compared with Phage_Finder (63%), VirSorter (74%) and PHASTER (82%) for raw DNA sequences. DBSCAN-SWA also provides user-friendly visualizations including a circular prophage viewer and interactive DataTables. Availability and implementation: DBSCAN-SWA is implemented in Python3 and is freely available under an open source GPLv2 license from https://github.com/HIT-ImmunologyLab/DBSCAN-SWA/.},
author = {Gan, Rui and Zhou, Fengxia and Si, Yu and Yang, Han and Chen, Chuangeng and Wu, Jiqiu and Zhang, Fan and Huang, Zhiwei},
doi = {10.1101/2020.07.12.199018},
file = {:E\:/wisc-intern/references/2020.07.12.199018.full.pdf:pdf},
issn = {2692-8205},
journal = {bioRxiv},
pages = {10--13},
title = {{DBSCAN-SWA: An integrated tool for rapid prophage detection and annotation}},
year = {2020}
}
